#version 450 core

// 预积分 Cook-Torrance 镜面 BRDF 以适应不同的粗糙度和观察方向。
// 结果保存到二维 LUT 纹理中，以 DFG1 和 DFG2 的分割求和近似项的形式，
// 这些项在渲染过程中作为 F0（法线入射时的菲涅尔反射率）的比例和偏移。
const float PI = 3.141592;
const float TwoPI = 2 * PI;
const float Epsilon = 0.001; 		// 这个程序需要更大的eps值

const uint NumSamples = 1024;
const float InvNumSamples = 1.0 / float(NumSamples);

layout(binding=0, rg16f) restrict writeonly uniform image2D LUT;

// 计算范德科尔普特基数逆序
// 参考: http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
float radicalInverse_VdC(uint bits)
{
	bits = (bits << 16u) | (bits >> 16u);
	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

// 从SampleNum样本点集合中采样第i个点
vec2 sampleHammersley(uint i)
{
	return vec2(i * InvNumSamples, radicalInverse_VdC(i));
}

// 重要性采样GGX法线分布函数，针对固定粗糙度值。
// 这返回Li和Lo之间归一化的半向量。
// 参考连接：http://blog.tobias-franke.eu/2014/03/30/notes_on_importance_sampling.html
vec3 sampleGGX(float u1, float u2, float roughness)
{
    float alpha = roughness * roughness;

    float cosTheta = sqrt((1.0 - u2) / (1.0 + (alpha * alpha - 1.0) * u2));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta); // 三角函数恒等式
    float phi = TwoPI * u1;

    // 返回笛卡尔坐标系中的向量。
    return vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);
}


// 可分离 Schlick-GGX 的单项
float gaSchlickG1(float cosTheta, float k)
{
	return cosTheta / (cosTheta * (1.0 - k) + k);
}

// 使用 Smith 方法的 Schlick-GGX 几何衰减函数近似（IBL 版本）
float gaSchlickGGX_IBL(float cosLi, float cosLo, float roughness)
{
	float r = roughness;
	float k = (r * r) / 2.0;  // Epic 建议对 IBL 照明使用这种粗糙度重新映射。
	return gaSchlickG1(cosLi, k) * gaSchlickG1(cosLo, k);
}

layout(local_size_x=32, local_size_y=32, local_size_z=1) in;
void main(void)
{
	// 获取积分参数
	float cosLo = gl_GlobalInvocationID.x / float(imageSize(LUT).x);
	float roughness = gl_GlobalInvocationID.y / float(imageSize(LUT).y);

	// 确保观察角非零以避免除以零（并因此产生 NaNs）
	cosLo = max(cosLo, Epsilon);

	// 从与法线的角度推导切空间观察向量（在此参考框架中指向 +Z）
	vec3 Lo = vec3(sqrt(1.0 - cosLo*cosLo), 0.0, cosLo);

    // 现在我们将预积分 Cook-Torrance BRDF 用于纯白环境，并将结果保存到 2D LUT 中
    // DFG1 和 DFG2 是反射积分的分割求和近似项
    // 参考: "Moving Frostbite to Physically Based Rendering 3.0", SIGGRAPH 2014, 第 4.9.2 节
	float DFG1 = 0;
	float DFG2 = 0;

	for(uint i=0; i<NumSamples; ++i) {
		vec2 u  = sampleHammersley(i);

		// 直接在切/着色器空间中采样，因为只要参考框架一致，我们就不关心它
		vec3 Lh = sampleGGX(u.x, u.y, roughness);

		// 通过在半向量 (Lh) 周围反射观察向量 (Lo) 计算入射方向 (Li)
		vec3 Li = 2.0 * dot(Lo, Lh) * Lh - Lo;

		float cosLi   = Li.z;
		float cosLh   = Lh.z;
		float cosLoLh = max(dot(Lo, Lh), 0.0);

		if(cosLi > 0.0) {
			float G  = gaSchlickGGX_IBL(cosLi, cosLo, roughness);
			float Gv = G * cosLoLh / (cosLh * cosLo);
			float Fc = pow(1.0 - cosLoLh, 5);

			DFG1 += (1 - Fc) * Gv;
			DFG2 += Fc * Gv;
		}
	}

	imageStore(LUT, ivec2(gl_GlobalInvocationID), vec4(DFG1, DFG2, 0, 0) * InvNumSamples);
}
