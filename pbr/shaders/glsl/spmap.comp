#version 450 core

// 使用 GGX 法线分布函数的重要性采样对环境立方体贴图进行预滤波
// 镜面 IBL 分离求和近似的一部分

const float PI = 3.141592;
const float TwoPI = 2 * PI;
const float Epsilon = 0.00001;

const uint NumSamples = 1024;
const float InvNumSamples = 1.0 / float(NumSamples);

// 在OpenGL中只绑定了单个mip级别。
const int NumMipLevels = 1;
layout(binding=0) uniform samplerCube inputTexture;
layout(binding=0, rgba16f) restrict writeonly uniform imageCube outputTexture[NumMipLevels];


// 用于预过滤的粗糙度值。
layout(location=0) uniform float roughness;
#define PARAM_LEVEL     0
#define PARAM_ROUGHNESS roughness


// 计算范德科尔普特基数逆序
// 参考: http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
float radicalInverse_VdC(uint bits)
{
	bits = (bits << 16u) | (bits >> 16u);
	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

// 从SampleNum样本点集合中采样第i个点
vec2 sampleHammersley(uint i)
{
	return vec2(i * InvNumSamples, radicalInverse_VdC(i));
}

// 重要性采样GGX法线分布函数，对于给定的粗糙度值。
// 返回Li和Lo之间的归一化半向量。
// 参考连接：http://blog.tobias-franke.eu/2014/03/30/notes_on_importance_sampling.html
vec3 sampleGGX(float u1, float u2, float roughness)
{
    float alpha = roughness * roughness;

    float cosTheta = sqrt((1.0 - u2) / (1.0 + (alpha * alpha - 1.0) * u2));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta); // 三角恒等式
    float phi = TwoPI * u1;

    // 返回笛卡尔坐标系中的向量。
    return vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);
}

// GGX/Towbridge-Reitz法线分布函数
// 使用 Disney 的重新参数化，alpha = roughness^2
float ndfGGX(float cosLh, float roughness)
{
	float alpha   = roughness * roughness;
	float alphaSq = alpha * alpha;

	float denom = (cosLh * cosLh) * (alphaSq - 1.0) + 1.0;
	return alphaSq / (PI * denom * denom);
}

// 基于当前片段坐标(gl_GlobalInvocationID.xyz)计算归一化的采样方向向量
// 这实际上是“逆采样”：我们重建采样向量，如果我们希望它“命中”立方体贴图中的这个特定片段
// 参考: OpenGL核心规范，第8.13节
vec3 getSamplingVector()
{
    vec2 st = gl_GlobalInvocationID.xy/vec2(imageSize(outputTexture[PARAM_LEVEL]));
    vec2 uv = 2.0 * vec2(st.x, 1.0-st.y) - vec2(1.0);

    vec3 ret;
    if(gl_GlobalInvocationID.z == 0)      ret = vec3(1.0,  uv.y, -uv.x);
    else if(gl_GlobalInvocationID.z == 1) ret = vec3(-1.0, uv.y,  uv.x);
    else if(gl_GlobalInvocationID.z == 2) ret = vec3(uv.x, 1.0, -uv.y);
    else if(gl_GlobalInvocationID.z == 3) ret = vec3(uv.x, -1.0, uv.y);
    else if(gl_GlobalInvocationID.z == 4) ret = vec3(uv.x, uv.y, 1.0);
    else if(gl_GlobalInvocationID.z == 5) ret = vec3(-uv.x, uv.y, -1.0);
    return normalize(ret);
}

// 计算正交基，用于从切线/着色空间转换到世界空间
void computeBasisVectors(const vec3 N, out vec3 S, out vec3 T)
{
	T = cross(N, vec3(0.0, 1.0, 0.0));
	T = mix(cross(N, vec3(1.0, 0.0, 0.0)), T, step(Epsilon, dot(T, T)));

	T = normalize(T);
	S = normalize(cross(N, T));
}

// 将点从切线/着色空间转换到世界空间
vec3 tangentToWorld(const vec3 v, const vec3 N, const vec3 S, const vec3 T)
{
	return S * v.x + T * v.y + N * v.z;
}

layout(local_size_x=32, local_size_y=32, local_size_z=1) in;
void main(void)
{
	// 确保在计算更高的 mipmap 级别时不会写超出输出
	ivec2 outputSize = imageSize(outputTexture[PARAM_LEVEL]);
	if(gl_GlobalInvocationID.x >= outputSize.x || gl_GlobalInvocationID.y >= outputSize.y) {
		return;
	}
	
	// 与零 mipmap 级别的单个立方体贴图 texel 相关的立体角
    // 这将在下面的重要性采样中派上用场
	vec2 inputSize = vec2(textureSize(inputTexture, 0));
	float wt = 4.0 * PI / (6 * inputSize.x * inputSize.y);
	
	// 近似：假设零视角（各向同性反射）
	vec3 N = getSamplingVector();
	vec3 Lo = N;
	
	vec3 S, T;
	computeBasisVectors(N, S, T);

	vec3 color = vec3(0);
	float weight = 0;

    // 使用 GGX 法线分布函数的重要性采样卷积环境贴图
	// 通过余弦项加权，因为 Epic 声称这通常可以提高质量
	for(uint i=0; i<NumSamples; ++i) {
		vec2 u = sampleHammersley(i);
		vec3 Lh = tangentToWorld(sampleGGX(u.x, u.y, PARAM_ROUGHNESS), N, S, T);

		// 通过在半向量 (Lh) 周围反射观察向量 (Lo) 计算入射方向 (Li)
		vec3 Li = 2.0 * dot(Lo, Lh) * Lh - Lo;

		float cosLi = dot(N, Li);
		if(cosLi > 0.0) {

			// 使用 Mipmap 过滤重要性采样以提高收敛性。
        	// 参考: https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch20.html，第 20.4 节
			float cosLh = max(dot(N, Lh), 0.0);

			// GGX 法线分布函数 (D 项) 概率密度函数。
			// 由于 Lh 到 Li 的密度变化而缩放 1/4（并且由于 N=V，缩放因子的其余部分抵消）
			float pdf = ndfGGX(cosLh, PARAM_ROUGHNESS) * 0.25;

			// 与此采样相关的立体角
			float ws = 1.0 / (NumSamples * pdf);

			// 要从中采样的Mip级别。
			float mipLevel = max(0.5 * log2(ws / wt) + 1.0, 0.0);

			color  += textureLod(inputTexture, Li, mipLevel).rgb * cosLi;
			weight += cosLi;
		}
	}
	color /= weight;

	imageStore(outputTexture[PARAM_LEVEL], ivec3(gl_GlobalInvocationID), vec4(color, 1.0));
}
