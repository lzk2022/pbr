#version 450 core

// 计算基于图像的光照的漫反射辐照度立方体贴图卷积
// 使用哈默斯利序列的准蒙特卡洛采样

const float PI = 3.141592;
const float TwoPI = 2 * PI;
const float Epsilon = 0.00001;

const uint NumSamples = 64 * 1024;						// 定义样本数量
const float InvNumSamples = 1.0 / float(NumSamples);	// 样本数量的倒数

layout(binding=0) uniform samplerCube inputTexture;
layout(binding=0, rgba16f) restrict writeonly uniform imageCube outputTexture;

// 计算范德科尔普特基数逆序
// 参考: http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
float radicalInverse_VdC(uint bits)
{
	bits = (bits << 16u) | (bits >> 16u);
	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

// 从SampleNum样本点集合中采样第i个点
vec2 sampleHammersley(uint i)
{
	return vec2(i * InvNumSamples, radicalInverse_VdC(i));
}

// 在半球上均匀采样点
// 余弦加权采样更适合于朗伯BRDF，但由于此计算着色器仅作为预处理步骤运行一次，性能不是*那么*重要
// 参考: "Physically Based Rendering" 第2版，第13.6.1节
vec3 sampleHemisphere(float u1, float u2)
{
	const float u1p = sqrt(max(0.0, 1.0 - u1*u1));
	return vec3(cos(TwoPI*u2) * u1p, sin(TwoPI*u2) * u1p, u1);
}

// 基于当前片段坐标(gl_GlobalInvocationID.xyz)计算归一化的采样方向向量
// 这实际上是“逆采样”：我们重建采样向量，如果我们希望它“命中”立方体贴图中的这个特定片段
// 参考: OpenGL核心规范，第8.13节
vec3 getSamplingVector()
{
    vec2 st = gl_GlobalInvocationID.xy/vec2(imageSize(outputTexture));
    vec2 uv = 2.0 * vec2(st.x, 1.0-st.y) - vec2(1.0);

    vec3 ret;
    if(gl_GlobalInvocationID.z == 0)      ret = vec3(1.0,  uv.y, -uv.x);
    else if(gl_GlobalInvocationID.z == 1) ret = vec3(-1.0, uv.y,  uv.x);
    else if(gl_GlobalInvocationID.z == 2) ret = vec3(uv.x, 1.0, -uv.y);
    else if(gl_GlobalInvocationID.z == 3) ret = vec3(uv.x, -1.0, uv.y);
    else if(gl_GlobalInvocationID.z == 4) ret = vec3(uv.x, uv.y, 1.0);
    else if(gl_GlobalInvocationID.z == 5) ret = vec3(-uv.x, uv.y, -1.0);
    return normalize(ret);
}

// 计算正交基，用于从切线/着色空间转换到世界空间
void computeBasisVectors(const vec3 N, out vec3 S, out vec3 T)
{
	// 无分支选择非退化T
	T = cross(N, vec3(0.0, 1.0, 0.0));
	T = mix(cross(N, vec3(1.0, 0.0, 0.0)), T, step(Epsilon, dot(T, T)));

	T = normalize(T);
	S = normalize(cross(N, T));
}

// 将点从切线/着色空间转换到世界空间
vec3 tangentToWorld(const vec3 v, const vec3 N, const vec3 S, const vec3 T)
{
	return S * v.x + T * v.y + N * v.z;
}

layout(local_size_x=32, local_size_y=32, local_size_z=1) in;
void main(void)
{
	vec3 N = getSamplingVector();
	
	vec3 S, T;
	computeBasisVectors(N, S, T);

	// 半球辐照度的蒙特卡洛积分
    // 作为一个小优化，这也包括了假设完全白色表面（反照率为1.0）的朗伯BRDF，因此我们不需要在
    // PBR片段着色器中进行归一化（因此从技术上讲，它编码的是出射辐射率而不是辐照度）
	vec3 irradiance = vec3(0);
	for(uint i=0; i<NumSamples; ++i) {
		vec2 u  = sampleHammersley(i);				 						// 使用Hammersley序列生成样本
		vec3 Li = tangentToWorld(sampleHemisphere(u.x, u.y), N, S, T);	 	// 将样本转换到世界空间
		float cosTheta = max(0.0, dot(Li, N));	  							// 计算与法线向量N的余弦值

		// 由于通过pdf除以PI，这里PI会抵消。
		irradiance += 2.0 * textureLod(inputTexture, Li, 0).rgb * cosTheta;
	}
	irradiance /= vec3(NumSamples);		 // 平均辐照度

	// 将计算的辐照度存储到输出纹理
	imageStore(outputTexture, ivec3(gl_GlobalInvocationID), vec4(irradiance, 1.0));
}
